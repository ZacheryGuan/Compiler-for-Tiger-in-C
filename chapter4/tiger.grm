%{
#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "absyn.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
    EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;

	/* useful fields, refer absyc.h*/
    A_expList expList;
    A_efieldList efieldList;
    A_decList decList;
    A_dec dec;
    A_ty ty;
    A_nametyList nametyList;
    A_fundecList fundecList;
    A_namety namety;
    A_fundec fundec;
    A_fieldList fieldList;
    A_field field;
	}

%token <sval> ID STRING
%token <ival> INT

/*(PAREN) [BRACK] {BRACE}*/
%token 
    COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
    LBRACE RBRACE DOT 
    PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
    AND OR ASSIGN
    ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
    BREAK NIL
    FUNCTION VAR TYPE 

/*set priority*/
%left SEMICOLON /*reduce*/

/*Shift to avoid if-else ambigious*/
%right THEN ELSE DOT DO OF

%right ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

/*bind union's members to YYSTYPE*/
%type <dec> dec vardec
%type <decList> decs
%type <efieldList> efieldlist
%type <exp> exp program funcall

/*
  seq seperated with ;
  list seperated with ,
*/
%type <expList> expseq explist
%type <fieldList> tyfields tyfield
%type <fundec> fundec
%type <fundecList> fundecs
%type <namety> tydec
%type <nametyList> tydecs
%type <ty> ty
%type <var> lvalue

%start program

%%

program :   exp    {absyn_root=$1;}
        ;

/*
  based on Appendix of the textbook
  ordered by the appendix's order.
 */
/*A.2 DECLRATIONS*/
decs: dec decs  {$$ = A_DecList($1, $2);}
    |			{$$ = NULL;}
    ;

dec : tydecs    {$$ = A_TypeDec(EM_tokPos, $1);}
	| vardec	{$$ = $1;}
	| fundecs	{$$ = A_FunctionDec(EM_tokPos, $1);}
    ;

tydecs  : tydec         {$$ = A_NametyList($1, NULL);}
		| tydec tydecs	{$$ = A_NametyList($1, $2);}
        ;

tydec   : TYPE ID EQ ty {$$ = A_Namety(S_Symbol($2), $4);}
        ;

tyfields: tyfield   {$$ = $1;}
		|			{$$ = NULL;}
        ;

tyfield : ID COLON ID                   {$$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), NULL);}
		| ID COLON ID COMMA tyfield		{$$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), $5);}
        ;

ty  : ID                        {$$ = A_NameTy(EM_tokPos, S_Symbol($1));}
	| LBRACE tyfields RBRACE	{$$ = A_RecordTy(EM_tokPos, $2);}
	| ARRAY OF ID				{$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}
    ; 

/*A.2.1 variable*/
vardec  : VAR ID ASSIGN exp             {$$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4);}
		| VAR ID COLON ID ASSIGN exp	{$$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6);}
        ;
        

/*A.2.2 function*/
fundecs : fundec            {$$ = A_FundecList($1, NULL);}
		| fundec fundecs	{$$ = A_FundecList($1, $2);}
        ;

fundec  : FUNCTION ID LPAREN tyfields RPAREN EQ exp             {$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7);}
		| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp	{$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9);}
        ;

funcall : ID LPAREN RPAREN          {$$ = A_CallExp(EM_tokPos, S_Symbol($1), NULL);}
		| ID LPAREN explist RPAREN	{$$ = A_CallExp(EM_tokPos, S_Symbol($1), $3);}
        ;

explist : exp               {$$ = A_ExpList($1, NULL);}
		| exp COMMA explist	{$$ = A_ExpList($1, $3);}
        ;

/*A.3.1 left value*/
lvalue  : ID                        {$$ = A_SimpleVar(EM_tokPos,S_Symbol($1));}
		| lvalue DOT ID				{$$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3));}
		| lvalue LBRACK exp RBRACK	{$$ = A_SubscriptVar(EM_tokPos, $1, $3);}
		| ID LBRACK exp RBRACK		{$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}
        ;  

/*A.3.3 expression*/
exp : lvalue            {$$ = A_VarExp(EM_tokPos, $1);}
	| lvalue ASSIGN exp {$$ = A_AssignExp(EM_tokPos, $1, $3);}

	| NIL				{$$ = A_NilExp(EM_tokPos);}

    /*sequeces*/
    | LPAREN RPAREN         {$$ = A_SeqExp(EM_tokPos, NULL);}
	| LPAREN expseq RPAREN	{$$ = A_SeqExp(EM_tokPos, $2);}

    | INT				{$$ = A_IntExp(EM_tokPos, $1);}	
	| STRING			{$$ = A_StringExp(EM_tokPos, $1);}

    /*neg*/
    | MINUS exp %prec UMINUS {$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}

    /*calc*/
	| exp TIMES exp		{$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
	| exp DIVIDE exp	{$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}

	| exp PLUS exp		{$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
	| exp MINUS exp		{$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}

    /*compare*/
    | exp EQ exp    {$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
	| exp NEQ exp	{$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
	| exp LT exp	{$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
	| exp LE exp	{$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
	| exp GT exp	{$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
	| exp GE exp	{$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}

    /*binary*/
    | exp AND exp   {$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));}
	| exp OR exp	{$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3);}

    | funcall   {$$ = $1;}

    /*record*/
    | ID LBRACK exp RBRACK OF exp   {$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6);}
	| ID LBRACE RBRACE				{$$ = A_RecordExp(EM_tokPos, S_Symbol($1), NULL);}
	| ID LBRACE efieldlist RBRACE		{$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}

    | IF exp THEN exp                   {$$ = A_IfExp(EM_tokPos, $2, $4, NULL);}
	| IF exp THEN exp ELSE exp			{$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
	| WHILE exp DO exp					{$$ = A_WhileExp(EM_tokPos, $2, $4);}
	| FOR ID ASSIGN exp TO exp DO exp	{$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}
	| BREAK								{$$ = A_BreakExp(EM_tokPos);}

    | LET decs IN END           {$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, NULL));}
	| LET decs IN expseq END	{$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}

	/*
    | LPAREN error RPAREN   {$$ = A_SeqExp(EM_tokPos, NULL);}
	| error SEMICOLON exp	{$$ = $3;}
	*/
    ;

expseq  : exp                   {$$ = A_ExpList($1, NULL);}
		| exp SEMICOLON expseq	{$$ = A_ExpList($1, $3);}
        ;

efieldlist  : ID EQ exp                     {$$ = A_EfieldList(A_Efield(S_Symbol($1), $3), NULL);}
            | ID EQ exp COMMA efieldlist	{$$ = A_EfieldList(A_Efield(S_Symbol($1), $3), $5);}
            ;
